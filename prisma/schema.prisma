generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  profile_photo String?
  username      String
  email         String
  password      String
}

model Patient {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  profile_photo     String?
  age               String?
  date_of_birth     String?
  pedigree_RGA      String?
  chip_number       String?
  name              String
  owner             String?
  ownerless_patient Boolean?
  specie            String?
  undefined_specie  Boolean?
  race              String?
  undefined_race    Boolean?
  status            String
  gender            String?
  physical_shape    String?
  starting_weight   String?
  current_weight    String?
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  exams             Exams[]
  surgery           Surgery[]
  hospitalizations  Hospitalizations[]
  reports           Reports[]
  vaccines          Vaccine[]
}

model Vaccine {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId            String   @db.ObjectId
  username             String
  vaccine              String
  date_of_vaccination  String
  revaccination_date   String?
  vaccine_code         String?
  name_of_veterinarian String
  age                  String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  patient              Patient? @relation(fields: [patientId], references: [id])
}

model Reports {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String   @db.ObjectId
  username  String
  title     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   Patient? @relation(fields: [patientId], references: [id])
}

model Hospitalizations {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId      String   @db.ObjectId
  username       String
  reason         String
  prognosis      String
  entry_date     String
  departure_date String?
  notes          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  patient        Patient? @relation(fields: [patientId], references: [id])
}

model Surgery {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId       String   @db.ObjectId
  username        String
  name_of_surgery String
  risk_level      String
  execution_date  String
  duration        String
  period          String
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  patient         Patient? @relation(fields: [patientId], references: [id])
}

model Exams {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId                String   @db.ObjectId
  username                 String
  execution_date           String
  runtime                  String
  execution_period         String
  responsible_person       String
  type_of_exam             String
  exam_name                String
  diagnosis                Json[]
  prognosis                String?
  description_of_treatment String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  patient                  Patient? @relation(fields: [patientId], references: [id])
}
